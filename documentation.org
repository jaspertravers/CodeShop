#+TITLE: codeshop Documentation

* Ideas and Explanations
** Functions in javascript
#+begin_src js
args = ['a', 'b']
body = 'return a + b'
sum = new Function (...args, body)
return sum (2,3)
#+end_src

#+RESULTS:
: 5

I want to be able to write into the editor:
#+begin_src js
// get n numbers evenly distributed between (mi, ma).
// includes the end values.
function linspace (n, mi, ma) {
  let res = [];
  const s = (ma - mi) / (n-1);
  let y = mi;
  for (let i = 0; i < n; i++){
      res.push(y);
      y += s;
  }
  return res;
}
return linspace(9,0,10)
#+end_src

** Library and Closure
#+begin_src js
const library = Object.keys($runtime).reduce((acc, fName)  => {
  const functionObj = (new Function(`return ${$runtime[fName]}`))();
  acc[fName] = functionObj;
  return acc;
}, {});

const closure = new Function (
  `return function(lib) {
    return ${sourceCode}
  }`
);

sketch = closure()(library);
#+end_src

running ~s1~ and ~linspace~
~library~ becomes ~{s1: f, linspace: f}~

~closure~  becomes, literally:
#+begin_src js
(function anonymous() {
  return function(lib) {
    return function linspace (n, mi, ma) {...}
  }
})
#+end_src

so finally, the "driver"
#+begin_src js
sketch = closure()(library);
#+end_src
passes ~library~ which is an object whose keys are other functions. In this way, any code may access other functions embeded in the ~lib~ object by ~lib.function()~

** Inputs (Sliders)
Parameters passed to the sketch element, instead of 
#+begin_src js
(p) => {...}
#+end_src
having
#+begin_src js
(p, [...sliders]) => {...}
#+end_src
* Development
- Internal representation and passing of code
- CM highlighting, scrolling?
- CM saving
- code transformation/formatting and passing between CM \rarr S
  - Maybe I should be using =json= or =edn=
- Code sharing/global namespace
- How does repl.it solve the "halting problem"?
- p5 instance mode?
- Drag and Drop wm
- add linspace to stdlib
- build std lib
- creat new Pair component for stdlib functions

* related
https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API
https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial
https://simon.html5.org/dump/html5-canvas-cheat-sheet.html

 https://stackoverflow.com/a/19655815/9346730

#+begin_src js
/*
 * https://stackoverflow.com/a/19655815/9346730
 * @param fun the function to carry out in the web worker
 * @param mes the message to send to the web worker
 * @param com the function to do on completion
 * creates, dispatches & receives a web worker
 */
function wor(fun, mes, com) {
   var wor = new Worker(URL.createObjectURL(new Blob([
         'self.onmessage = ' + fun.toString()], {
         type: 'application/javascript'
   })));       
   wor.postMessage(mes);
   wor.onmessage = com;
}
#+end_src

* Notes
- Observable must thread their function boxes
- How does repl.it work?

** Related Services
- Observable
- Ronin
- Jupyter
- jsFiddle
- Codepen
- pythontutor

** Related Technologies
- eval()
- new Function()
- web workers
- localStorage
